{"version":3,"sources":["app/Navbar.js","features/posts/PostsList.jsx","features/posts/postsSlice.jsx","features/posts/AddPostForm.jsx","App.js","api/server.js","app/store.js","index.js"],"names":["Navbar","className","PostsList","renderedPosts","useSelector","state","posts","map","post","title","content","substring","id","postsSlice","createSlice","name","initialState","reducers","postAdded","action","push","payload","actions","AddPostForm","useState","setTitle","setContent","dispatch","useDispatch","htmlFor","type","value","onChange","e","target","onClick","nanoid","App","seedDate","exact","path","render","to","configureStore","reducer","postsReducer","ARTIFICIAL_DELAY_MS","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","user","randomFromArray","array","length","db","factory","primaryKey","firstName","String","lastName","username","manyOf","date","reactions","oneOf","comments","comment","text","reaction","thumbsUp","Number","hooray","heart","rocket","eyes","createUserData","internet","userName","i","author","create","j","newPost","lorem","words","recent","paragraphs","serializePost","handlers","rest","get","req","res","ctx","getAll","delay","json","data","body","status","findFirst","where","equals","params","postId","patch","updatedPost","update","notifications","generateRandomNotifications","undefined","worker","setupWorker","socketServer","MockSocketServer","sendRandomNotifications","socket","since","obj","send","JSON","stringify","sendMessage","on","message","parse","notificationTemplates","numNotifications","pastDate","now","parseISO","valueOf","setMinutes","getMinutes","Array","template","between","start","onUnhandledRequest","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.9dd5f570.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Navbar = () => {\n  return (\n    <nav>\n      <section>\n        <h1>Redux Essentials Example</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\"></div>\n        </div>\n      </section>\n    </nav>\n  )\n}\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const PostsList = () => {\r\n  // const posts = useSelector((state) => state.posts);\r\n  const posts = useSelector((state) => state.posts);\r\n  const renderedPosts = posts.map((post) => (\r\n    <article className=\"post-excerpt\" key={post.id}>\r\n      <h3>{post.title}</h3>\r\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\r\n    </article>\r\n  ));\r\n  return (\r\n    <section className=\"posts-list\">\r\n      <h2>Posts</h2>\r\n      {renderedPosts}\r\n    </section>\r\n  );\r\n};\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = [\r\n  { id: '1', title: 'First Post!', content: 'Hello!' },\r\n  { id: '2', title: 'Second Post', content: 'More text' }\r\n];\r\n\r\nconst postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    postAdded(state, action) {\r\n      state.push(action.payload);\r\n    }\r\n  }\r\n});\r\n\r\nexport const { postAdded } = postsSlice.actions;\r\n\r\nexport default postsSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport { postAdded } from './postsSlice';\r\n\r\nexport const AddPostForm = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n\r\n  const onTitleChange = (e) => {\r\n    setTitle(e.target.value);\r\n  };\r\n\r\n  const onContentChange = (e) => {\r\n    setContent(e.target.value);\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmitPost = (e) => {\r\n    // e.preventDefault();\r\n    if (title && content) {\r\n      dispatch(\r\n        postAdded({\r\n          id: nanoid(),\r\n          title,\r\n          content\r\n        })\r\n      );\r\n      setTitle('');\r\n      setContent('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Add Post</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"postTitle\"\r\n          id=\"postTitle\"\r\n          value={title}\r\n          onChange={onTitleChange}\r\n        />\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          type=\"text\"\r\n          name=\"postContent\"\r\n          id=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChange}\r\n        />\r\n        <button type=\"button\" onClick={handleSubmitPost}>\r\n          Save Post\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom';\n\nimport { Navbar } from './app/Navbar';\nimport { PostsList } from './features/posts/PostsList';\nimport { AddPostForm } from './features/posts/AddPostForm';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <>\n                <AddPostForm />\n                <PostsList />\n              </>\n            )}\n          />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { rest, setupWorker } from 'msw'\nimport { factory, oneOf, manyOf, primaryKey } from '@mswjs/data'\nimport { nanoid } from '@reduxjs/toolkit'\nimport faker from 'faker'\nimport seedrandom from 'seedrandom'\nimport { Server as MockSocketServer } from 'mock-socket'\nimport { setRandom } from 'txtgen'\n\nimport { parseISO } from 'date-fns'\n\nconst NUM_USERS = 3\nconst POSTS_PER_USER = 3\nconst RECENT_NOTIFICATIONS_DAYS = 7\n\n// Add an extra delay to all endpoints, so loading spinners show up.\nconst ARTIFICIAL_DELAY_MS = 2000\n\n/* RNG setup */\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\n/* MSW Data Model Setup */\n\nexport const db = factory({\n  user: {\n    id: primaryKey(nanoid),\n    firstName: String,\n    lastName: String,\n    name: String,\n    username: String,\n    posts: manyOf('post'),\n  },\n  post: {\n    id: primaryKey(nanoid),\n    title: String,\n    date: String,\n    content: String,\n    reactions: oneOf('reaction'),\n    comments: manyOf('comment'),\n    user: oneOf('user'),\n  },\n  comment: {\n    id: primaryKey(String),\n    date: String,\n    text: String,\n    post: oneOf('post'),\n  },\n  reaction: {\n    id: primaryKey(nanoid),\n    thumbsUp: Number,\n    hooray: Number,\n    heart: Number,\n    rocket: Number,\n    eyes: Number,\n    post: oneOf('post'),\n  },\n})\n\nconst createUserData = () => {\n  const firstName = faker.name.firstName()\n  const lastName = faker.name.lastName()\n\n  return {\n    firstName,\n    lastName,\n    name: `${firstName} ${lastName}`,\n    username: faker.internet.userName(),\n  }\n}\n\nconst createPostData = (user) => {\n  return {\n    title: faker.lorem.words(),\n    date: faker.date.recent(RECENT_NOTIFICATIONS_DAYS).toISOString(),\n    user,\n    content: faker.lorem.paragraphs(),\n    reactions: db.reaction.create(),\n  }\n}\n\n// Create an initial set of users and posts\nfor (let i = 0; i < NUM_USERS; i++) {\n  const author = db.user.create(createUserData())\n\n  for (let j = 0; j < POSTS_PER_USER; j++) {\n    const newPost = createPostData(author)\n    db.post.create(newPost)\n  }\n}\n\nconst serializePost = (post) => ({\n  ...post,\n  user: post.user.id,\n})\n\n/* MSW REST API Handlers */\n\nexport const handlers = [\n  rest.get('/fakeApi/posts', function (req, res, ctx) {\n    const posts = db.post.getAll().map(serializePost)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(posts))\n  }),\n  rest.post('/fakeApi/posts', function (req, res, ctx) {\n    const data = req.body\n\n    if (data.content === 'error') {\n      return res(\n        ctx.delay(ARTIFICIAL_DELAY_MS),\n        ctx.status(500),\n        ctx.json('Server error saving this post!')\n      )\n    }\n\n    data.date = new Date().toISOString()\n\n    const user = db.user.findFirst({ where: { id: { equals: data.user } } })\n    data.user = user\n    data.reactions = db.reaction.create()\n\n    const post = db.post.create(data)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.get('/fakeApi/posts/:postId', function (req, res, ctx) {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.patch('/fakeApi/posts/:postId', (req, res, ctx) => {\n    const { id, ...data } = req.body\n    const updatedPost = db.post.update({\n      where: { id: { equals: req.params.postId } },\n      data,\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n\n  rest.get('/fakeApi/posts/:postId/comments', (req, res, ctx) => {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json({ comments: post.comments })\n    )\n  }),\n\n  rest.post('/fakeApi/posts/:postId/reactions', (req, res, ctx) => {\n    const postId = req.params.postId\n    const reaction = req.body.reaction\n    const post = db.post.findFirst({\n      where: { id: { equals: postId } },\n    })\n\n    const updatedPost = db.post.update({\n      where: { id: { equals: postId } },\n      data: {\n        reactions: {\n          ...post.reactions,\n          [reaction]: (post.reactions[reaction] += 1),\n        },\n      },\n    })\n\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n  rest.get('/fakeApi/notifications', (req, res, ctx) => {\n    const numNotifications = getRandomInt(1, 5)\n\n    let notifications = generateRandomNotifications(\n      undefined,\n      numNotifications,\n      db\n    )\n\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(notifications))\n  }),\n  rest.get('/fakeApi/users', (req, res, ctx) => {\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(db.user.getAll()))\n  }),\n]\n\nexport const worker = setupWorker(...handlers)\n// worker.printHandlers() // Optional: nice for debugging to see all available route handlers that will be intercepted\n\n/* Mock Websocket Setup */\n\nconst socketServer = new MockSocketServer('ws://localhost')\n\nlet currentSocket\n\nconst sendMessage = (socket, obj) => {\n  socket.send(JSON.stringify(obj))\n}\n\n// Allow our UI to fake the server pushing out some notifications over the websocket,\n// as if other users were interacting with the system.\nconst sendRandomNotifications = (socket, since) => {\n  const numNotifications = getRandomInt(1, 5)\n\n  const notifications = generateRandomNotifications(since, numNotifications, db)\n\n  sendMessage(socket, { type: 'notifications', payload: notifications })\n}\n\nexport const forceGenerateNotifications = (since) => {\n  sendRandomNotifications(currentSocket, since)\n}\n\nsocketServer.on('connection', (socket) => {\n  currentSocket = socket\n\n  socket.on('message', (data) => {\n    const message = JSON.parse(data)\n\n    switch (message.type) {\n      case 'notifications': {\n        const since = message.payload\n        sendRandomNotifications(socket, since)\n        break\n      }\n      default:\n        break\n    }\n  })\n})\n\n/* Random Notifications Generation */\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nfunction generateRandomNotifications(since, numNotifications, db) {\n  const now = new Date()\n  let pastDate\n\n  if (since) {\n    pastDate = parseISO(since)\n  } else {\n    pastDate = new Date(now.valueOf())\n    pastDate.setMinutes(pastDate.getMinutes() - 15)\n  }\n\n  // Create N random notifications. We won't bother saving these\n  // in the DB - just generate a new batch and return them.\n  const notifications = [...Array(numNotifications)].map(() => {\n    const user = randomFromArray(db.user.getAll())\n    const template = randomFromArray(notificationTemplates)\n    return {\n      id: nanoid(),\n      date: faker.date.between(pastDate, now).toISOString(),\n      message: template,\n      user: user.id,\n    }\n  })\n\n  return notifications\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport postsReducer from '../features/posts/postsSlice';\n\nexport default configureStore({\n  reducer: {\n    posts: postsReducer\n  }\n});\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nimport { worker } from './api/server'\n\n// Wrap app rendering so we can wait for the mock API to initialize\nasync function start() {\n  // Start our mock API server\n  await worker.start({ onUnhandledRequest: 'bypass' })\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\n\nstart()\n"],"sourceRoot":""}